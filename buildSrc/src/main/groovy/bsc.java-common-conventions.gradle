import org.gradle.api.services.BuildService
import org.gradle.api.services.BuildServiceParameters
import BuildSrcBuildService

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    // Apply the java Plugin to add support for Java.
    id 'java'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    constraints {
        // Define dependency versions as constraints
        implementation 'org.apache.commons:commons-text:1.9'
    }

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

abstract class PrecompiledBuildService implements BuildService<BuildServiceParameters.None> {
    void customFunction() {
        println("PrecompiledBuildService.customFunction()")
    }
}


tasks.named("build") {
    def precompiledProvider = gradle.sharedServices.registerIfAbsent("precompiledBuildService", PrecompiledBuildService.class) {}
    doFirst {
        def precompiled = precompiledProvider.get()
        println(precompiled.class)
        println(precompiled.class.classLoader)
        precompiled.customFunction()
    }

//    def buildsrcProvider = gradle.sharedServices.registerIfAbsent("buildsrcBuildService", BuildSrcBuildService.class) {}
//    doFirst {
//        def buildsrc = buildsrcProvider.get()
//        println(buildsrc.class)
//        println(buildsrc.class.classLoader)
//        buildsrc.customFunction()
//    }
}
